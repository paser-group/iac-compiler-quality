- name: Heuristic Test Playbook for ansible.builtin.raw
  hosts: localhost
  gather_facts: false
  
  vars:
    executable: "ls"
    free_form: "-l /tmp"
    mixed_case_string: "HeLlO"
    byte_string: !binary |-
      SGVsbG8gd29ybGQ=
    mixed_type_list:
      - "Hello"
      - !binary |-
          SGVsbG8gd29ybGQ=
    mac_address: "{{ lookup('mac', namespace='') }}"
    random_port: "{{ 49152 + (ansible_play_batch_index * 100) }}"
    encoded_string: !binary |
      SGVsbG8gd29ybGQ=
    limit_value: "{{ 10 / 3 }}"
    null_value: !null
    random_ip: "{{ lookup('pipe', 'echo $((RANDOM%255)).$((RANDOM%255)).$((RANDOM%255)).$((RANDOM%255))') }}"
  
  tasks:
    - name: Execute raw command with default attributes
      ansible.builtin.raw:
        executable: "{{ executable }}"
        free_form: "{{ free_form }}"
      register: raw_output
      
    - name: Display raw command output
      debug:
        var: raw_output.stdout_lines
      
    - name: Test mixed case sensitivity for string configuration values
      assert:
        that:
          - mixed_case_string.lower() == mixed_case_string  # Check if string is lowercase
      
    - name: Test byte string configuration value
      assert:
        that:
          - byte_string.decode('utf-8') == "Hello"  # Check if byte string value decodes to "Hello"
      
    - name: Test mixed type list configuration value
      assert:
        that:
          - mixed_type_list[0] == "Hello"  # Check if first element is "Hello"
          - mixed_type_list[1].decode('utf-8') == "Hello"  # Check if second element decodes to "Hello"
      
    - name: Test random MAC address configuration value
      assert:
        that:
          - mac_address is match("^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$")  # Check if MAC address is valid
      
    - name: Test random port configuration value
      assert:
        that:
          - random_port | int >= 49152  # Check if port is within the valid range
      
    - name: Test string with varied encoding configuration value
      assert:
        that:
          - encoded_string.decode('utf-8') == "Hello"  # Check if encoded string decodes to "Hello"
      
    - name: Test division-based limit configuration value
      assert:
        that:
          - abs(limit_value * 3 - 10) < 0.00001  # Check if limit value * 3 equals 10 with a small margin
      
    - name: Test null configuration value
      assert:
        that:
          - null_value is null  # Check if null value is null
      
    - name: Test random IP address configuration value
      assert:
        that:
          - random_ip is match("^([0-9]{1,3}\\.){3}[0-9]{1,3}$")  # Check if IP address is valid