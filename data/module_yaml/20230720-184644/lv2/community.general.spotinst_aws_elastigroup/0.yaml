---
- name: Test Playbook
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Create Spot Instances
      community.general.spotinst_aws_elastigroup:
        account_id: "1234567890"      # str
        availability_vs_cost: "balanced"     # str
        availability_zones:
          - us-west-2a
          - us-west-2b     # list
        block_device_mappings:
          - device_name: /dev/sda1
            ebs:
              volume_size: 8
        chef:
          enable: true
          recipe_json: {}     # dict
        credentials_path: /path/to/credentials     # path
        do_not_update: []     # list
        down_scaling_policies: []     # list
        draining_timeout: 120     # int
        ebs_optimized: false     # bool
        ebs_volume_pool:
          - volume_size: 10
        ecs:
          enable: false
          cluster_name: my-cluster     # dict
        elastic_beanstalk:
          enable: false
          environment_name: my-environment     # dict
        elastic_ips: []     # list
        fallback_to_od: true     # bool
        health_check_grace_period: 300     # int
        health_check_type: EC2     # str
        health_check_unhealthy_duration_before_replacement: 600     # int
        iam_role_arn: "arn:aws:iam::1234567890:role/my-role"     # str
        iam_role_name: "my-role"     # str
        id: "group-id"     # str
        image_id: "ami-12345678"     # str
        key_pair: "my-key-pair"     # str
        kubernetes:
          enable: false
          cluster_name: my-cluster     # dict
        lifetime_period: 600     # int
        load_balancers: []     # list
        max_size: 5     # int
        mesosphere:
          enable: false
          cluster_name: my-cluster     # dict
        min_size: 1     # int
        monitoring: basic     # str
        multai_load_balancers: []     # list
        multai_token: "my-token"     # str
        name: "my-elastigroup"     # str
        network_interfaces: []     # list
        on_demand_count: 0     # int
        on_demand_instance_type: "t2.micro"     # str
        opsworks:
          enable: false
          stack_id: "my-stack-id"     # dict
        persistence:
          block_devices: []     # dict
          should_persist_root_device: true     # dict
        product: linux     # str
        rancher:
          enable: false
          cluster_id: "my-cluster-id"     # dict
        right_scale:
          enable: false
          deployment_id: "my-deployment-id"     # dict
        risk: 0     # int
        roll_config:
          batch_size_percentage: 20     # dict
          grace_period: 600     # dict
          health_check_type: health     # dict
          strategy: rolling     # dict
        scheduled_tasks: []     # list
        security_group_ids:
          - sg-12345678
          - sg-87654321     # list
        shutdown_script: "shutdown-script.sh"     # str
        signals: []     # list
        spin_up_time: 160     # int
        spot_instance_types:
          - m3.medium
          - c4.large     # list
        state: present     # str
        tags:
          - key: Name
            value: my-instance     # list
        target: 60     # int
        target_group_arns: []     # list
        target_tracking_policies: []     # list
        tenancy: default     # str
        terminate_at_end_of_billing_hour: true     # bool
        token: "my-token"     # str
        uniqueness_by: availabilityZone     # str
        unit: "spot"     # str
        up_scaling_policies:
          - policy_name: scale-up-policy
            metric_name: CPUUtilization
            threshold: 80
            statistic: Average
            evaluation_periods: 1
            period: 60
            action: scale-up-action
            adjustment: 1
        user_data: |
          #!/bin/bash
          echo "Hello, World!"     # str
        utilize_reserved_instances: true     # bool
        wait_for_instances: true     # bool
        wait_timeout: 300     # int
      loop: "{{ [{}] }}"     # Introduce byte string values in place of regular strings.
      loop_control:
        loop_var: my_input

    - name: Debug Output
      debug:
        var: my_input