---
- name: Test playbook for spotinst_aws_elastigroup
  hosts: all
  vars:
    account_id: "my_account_id"  # string value
    availability_vs_cost: b"availability_vs_cost",  # bytes value
    availability_zones:
      - "us-west-1a"
      - "us-west-1b"
      - "us-west-1c"
    block_device_mappings:
      - device_name: "/dev/sda1"
        ebs: {}
    chef:
      name: "my_chef"
      versions: [2, 3, 4]
    credentials_path: "/path/to/credentials"  # string value
    do_not_update:
      - "ubuntu1"
      - "centos1"
    down_scaling_policies:
      - name: "policy1"
        adjustment_step: 2
    draining_timeout: 60  # integer value
    ebs_optimized: true  # boolean value
    ebs_volume_pool:
      - "ebs1"
      - "ebs2"
    ecs:
      cluster_name: "my_cluster"
      task_definition_arn: "my_task_def_arn"
    elastic_beanstalk:
      application_name: "my_app"
      environment_name: "my_env"
    elastic_ips:
      - "1.2.3.4"
      - "5.6.7.8"
    fallback_to_od: true  # boolean value
    health_check_grace_period: 300  # integer value
    health_check_type: "EC2"  # string value
    health_check_unhealthy_duration_before_replacement: 120  # integer value
    iam_role_arn: "my_iam_role_arn"  # string value
    iam_role_name: "my_iam_role"  # string value
    id: "my_id"  # string value
    image_id: "ami-12345678"  # string value
    key_pair: "my_key_pair"  # string value
    kubernetes:
      cluster_name: "my_kubernetes_cluster"
      version: "1.20.4"
    lifetime_period: 24  # integer value
    load_balancers:
      - "lb1"
      - "lb2"
    max_size: 5  # integer value
    mesosphere:
      cluster_name: "my_mesosphere_cluster"
      version: "2.11.1"
    min_size: 2  # integer value
    monitoring: "basic"  # string value
    multai_load_balancers:
      - "mlb1"
      - "mlb2"
    multai_token: "my_token"  # string value
    name: "my_group"  # string value
    network_interfaces:
      - device_index: 0
        subnet_id: "subnet1"
    on_demand_count: 3  # integer value
    on_demand_instance_type: "t2.micro"  # string value
    opsworks:
      stack_id: "my_stack_id"
      custom_json: {"key": "value"}
    persistence:
      block_devices:
        - device_name: "/dev/sdb"
          ebs: {}
    product: "Linux/UNIX"  # string value
    rancher:
      cluster_id: "my_cluster_id"
      version: "2.6.2"
    right_scale:
      deployment_id: "my_deployment_id"
      server_template_id: "my_template_id"
    risk: 1  # integer value
    roll_config:
      grace_period_action: "REPLACE_SERVER"
      lock_ports: true
    scheduled_tasks:
      - name: "task1"
        cron_expression: "0 0 * * *"
    security_group_ids:
      - "sg1"
      - "sg2"
    shutdown_script: "my_shutdown_script"  # string value
    signals:
      - name: "sig1"
        timeout: 10
    spin_up_time: 180  # integer value
    spot_instance_types:
      - "c5.large"
      - "m5.large"
    state: "present"  # string value
    tags:
      - key: "env"
        value: "production"
      - key: "service"
        value: "web"
    target: 75  # integer value
    target_group_arns:
      - "tg1"
      - "tg2"
    target_tracking_policies:
      - name: "policy1"
        disable_scale_in: true
    tenancy: "default"  # string value
    terminate_at_end_of_billing_hour: true  # boolean value
    token: "my_token"  # string value
    uniqueness_by: "name"  # string value
    unit: "requests"  # string value
    up_scaling_policies:
      - name: "policy1"
        adjustment_step: 2
    user_data: |
      echo "User data script"
    utilize_reserved_instances: true  # boolean value
    wait_for_instances: true  # boolean value
    wait_timeout: 300  # integer value

  tasks:
    - name: Create or Update Spotinst AWS Elastigroup
      community.general.spotinst_aws_elastigroup:
        account_id: "{{ account_id }}"
        availability_vs_cost: "{{ availability_vs_cost }}"
        availability_zones: "{{ availability_zones }}"
        block_device_mappings: "{{ block_device_mappings }}"
        chef: "{{ chef }}"
        credentials_path: "{{ credentials_path }}"
        do_not_update: "{{ do_not_update }}"
        down_scaling_policies: "{{ down_scaling_policies }}"
        draining_timeout: "{{ draining_timeout }}"
        ebs_optimized: "{{ ebs_optimized }}"
        ebs_volume_pool: "{{ ebs_volume_pool }}"
        ecs: "{{ ecs }}"
        elastic_beanstalk: "{{ elastic_beanstalk }}"
        elastic_ips: "{{ elastic_ips }}"
        fallback_to_od: "{{ fallback_to_od }}"
        health_check_grace_period: "{{ health_check_grace_period }}"
        health_check_type: "{{ health_check_type }}"
        health_check_unhealthy_duration_before_replacement: "{{ health_check_unhealthy_duration_before_replacement }}"
        iam_role_arn: "{{ iam_role_arn }}"
        iam_role_name: "{{ iam_role_name }}"
        id: "{{ id }}"
        image_id: "{{ image_id }}"
        key_pair: "{{ key_pair }}"
        kubernetes: "{{ kubernetes }}"
        lifetime_period: "{{ lifetime_period }}"
        load_balancers: "{{ load_balancers }}"
        max_size: "{{ max_size }}"
        mesosphere: "{{ mesosphere }}"
        min_size: "{{ min_size }}"
        monitoring: "{{ monitoring }}"
        multai_load_balancers: "{{ multai_load_balancers }}"
        multai_token: "{{ multai_token }}"
        name: "{{ name }}"
        network_interfaces: "{{ network_interfaces }}"
        on_demand_count: "{{ on_demand_count }}"
        on_demand_instance_type: "{{ on_demand_instance_type }}"
        opsworks: "{{ opsworks }}"
        persistence: "{{ persistence }}"
        product: "{{ product }}"
        rancher: "{{ rancher }}"
        right_scale: "{{ right_scale }}"
        risk: "{{ risk }}"
        roll_config: "{{ roll_config }}"
        scheduled_tasks: "{{ scheduled_tasks }}"
        security_group_ids: "{{ security_group_ids }}"
        shutdown_script: "{{ shutdown_script }}"
        signals: "{{ signals }}"
        spin_up_time: "{{ spin_up_time }}"
        spot_instance_types: "{{ spot_instance_types }}"
        state: "{{ state }}"
        tags: "{{ tags }}"
        target: "{{ target }}"
        target_group_arns: "{{ target_group_arns }}"
        target_tracking_policies: "{{ target_tracking_policies }}"
        tenancy: "{{ tenancy }}"
        terminate_at_end_of_billing_hour: "{{ terminate_at_end_of_billing_hour }}"
        token: "{{ token }}"
        uniqueness_by: "{{ uniqueness_by }}"
        unit: "{{ unit }}"
        up_scaling_policies: "{{ up_scaling_policies }}"
        user_data: "{{ user_data }}"
        utilize_reserved_instances: "{{ utilize_reserved_instances }}"
        wait_for_instances: "{{ wait_for_instances }}"
        wait_timeout: "{{ wait_timeout }}"