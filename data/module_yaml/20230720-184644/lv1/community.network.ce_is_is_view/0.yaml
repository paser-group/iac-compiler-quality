- name: Manage ISIS View Configuration
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Configure ISIS View
      community.network.ce_is_is_view:
        aclnum_or_name: 123  # Setting aclnum_or_name to an integer; expect an error
        allow_filter: "true"  # Setting allow_filter to a string; expect an error
        allow_up_down: "yes"  # Setting allow_up_down to a string; expect an error
        autocostenable: "false"  # Setting autocostenable to a string; expect an error
        autocostenablecompatible: "true"  # Setting autocostenablecompatible to a string; expect an error
        avoid_learning: "yes"  # Setting avoid_learning to a string; expect an error
        bfd_min_rx: "500"  # Setting bfd_min_rx to a string; expect an error
        bfd_min_tx: "100"  # Setting bfd_min_tx to a string; expect an error
        bfd_multiplier_num: "3"  # Setting bfd_multiplier_num to a string; expect an error
        cost: "10"  # Setting cost to a string; expect an error
        cost_type: "external"  # Setting cost_type to a string; expect no error
        coststyle: "TE"  # Setting coststyle to a string; expect no error
        defaultmode: "any"  # Setting defaultmode to a string; expect no error
        description: 456  # Setting description to an integer; expect an error
        enablelevel1tolevel2: "yes"  # Setting enablelevel1tolevel2 to a string; expect an error
        export_aclnumorname: 789  # Setting export_aclnumorname to an integer; expect an error
        export_ipprefix: "10.1.1.0/24"  # Setting export_ipprefix to a string; expect no error
        export_policytype: "static"  # Setting export_policytype to a string; expect no error
        export_processid: "1"  # Setting export_processid to a string; expect an error
        export_protocol: "ospf"  # Setting export_protocol to a string; expect no error
        export_routepolicyname: "Policy1"  # Setting export_routepolicyname to a string; expect no error
        import_aclnumorname: "ACL3"  # Setting import_aclnumorname to a string; expect no error
        import_cost: "20"  # Setting import_cost to a string; expect an error
        import_ipprefix: "10.2.2.0/24"  # Setting import_ipprefix to a string; expect no error
        import_route_policy: "Policy2"  # Setting import_route_policy to a string; expect no error
        import_routepolicy_name: "Policy3"  # Setting import_routepolicy_name to a string; expect no error
        import_routepolicyname: "Policy4"  # Setting import_routepolicyname to a string; expect no error
        import_tag: "30"  # Setting import_tag to a string; expect an error
        impotr_leveltype: "level-1-2"  # Setting impotr_leveltype to a string; expect no error
        inheritcost: "yes"  # Setting inheritcost to a string; expect an error
        instance_id: "2"  # Setting instance_id to a string; expect an error
        ip_address: 192.168.1.1  # Setting ip_address without quotes; expect an error
        ip_prefix_name: "Prefix1"  # Setting ip_prefix_name to a string; expect no error
        islevel: "level-1"  # Setting islevel to a string; expect no error
        level_type: "level-2"  # Setting level_type to a string; expect no error
        max_load: "500"  # Setting max_load to a string; expect an error
        mode_routepolicyname: "Policy5"  # Setting mode_routepolicyname to a string; expect no error
        mode_tag: "40"  # Setting mode_tag to a string; expect an error
        netentity: "entity1"  # Setting netentity to a string; expect no error
        penetration_direct: "direct1"  # Setting penetration_direct to a string; expect no error
        permitibgp: "yes"  # Setting permitibgp to a string; expect an error
        preference_value: "50"  # Setting preference_value to a string; expect an error
        processid: "3"  # Setting processid to a string; expect an error
        protocol: "isis"  # Setting protocol to a string; expect no error
        relaxspfLimit: "yes"  # Setting relaxspfLimit to a string; expect an error
        route_policy_name: "Policy6"  # Setting route_policy_name to a string; expect no error
        state: "present"
        stdbandwidth: "100"  # Setting stdbandwidth to a string; expect an error
        stdlevel1cost: "5"  # Setting stdlevel1cost to a string; expect an error
        stdlevel2cost: "6"  # Setting stdlevel2cost to a string; expect an error
        tag: "60"  # Setting tag to a string; expect an error
        weight: "70"  # Setting weight to a string; expect an error

      register: result

    - name: Debug Result
      debug:
        var: result