name,desc_short,desc_full,args,arg_types,arg_str,level,sys_role,prompt,response,second_query,code
ansible.builtin.add_host,Add a host (and alternatively a group) to the ansible-playboo...,"> ANSIBLE.BUILTIN.ADD_HOST    (/home/sibat/.local/lib/python3.10/site-packages/ansible/modules/add_host.py)

        Use variables to create new hosts and groups in inventory for
        use in later plays of the same playbook. Takes variables so
        you can define the new hosts more fully. This module is also
        supported for Windows targets.

ADDED IN: version 0.9 of ansible-core

  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- groups
        The groups to add the hostname to.
        aliases: [group, groupname]
        default: null
        elements: str
        type: list

= name
        The hostname/ip of the host to add to the inventory, can
        include a colon and a port number.
        aliases: [host, hostname]
        type: str


ATTRIBUTES:

        action:
          description: Indicates this has a corresponding action plugin so some parts of the
            options can be executed on the controller
          support: full
        async:
          description: Supports being used with the `async' keyword
          support: none
        become:
          description: Is usable alongside become keywords
          support: none
        bypass_host_loop:
          description:
          - Forces a 'global' task that does not execute per host, this bypasses per host
            templating and serial, throttle and other loop considerations
          - Conditionals will work as if `run_once' is being used, variables used will be
            from the first available host
          - This action will not work normally outside of lockstep strategies
          support: full
        bypass_task_loop:
          description: These tasks ignore the `loop' and `with_' keywords
          support: none
        check_mode:
          description: Can run in check_mode and return changed status prediction without
            modifying target
          details: While this makes no changes to target systems the 'in memory' inventory
            will still be altered
          support: partial
        connection:
          description: Uses the target's configured connection information to execute code
            on it
          support: none
        core:
          description: This is a 'core engine' feature and is not implemented like most task
            actions, so it is not overridable in any way via the plugin system.
          details: While parts of this action are implemented in core, other parts are still
            available as normal plugins and can be partially overridden
          support: partial
        delegation:
          description: Can be used in conjunction with delegate_to and related keywords
          support: none
        diff_mode:
          description: Will return details on what has changed (or possibly needs changing
            in check_mode), when in diff mode
          support: none
        ignore_conditional:
          description: The action is not subject to conditional execution so it will ignore
            the `when:' keyword
          support: none
        platform:
          description: Target OS/families that can be operated against
          platforms: all
          support: N/A
        tags:
          description: Allows for the 'tags' keyword to control the selection of this action
            for execution
          support: full
        until:
          description: Denotes if this action objeys until/retry/poll keywords
          support: full

NOTES:
      * The alias `host' of the parameter `name' is only
        available on Ansible 2.4 and newer.
      * Since Ansible 2.4, the `inventory_dir' variable is now
        set to `None' instead of the 'global inventory source',
        because you can now have multiple sources.  An example
        was added that shows how to partially restore the
        previous behaviour.
      * Though this module does not change the remote host, we
        do provide 'changed' status as it can be useful for
        those trying to track inventory changes.
      * The hosts added will not bypass the `--limit' from the
        command line, so both of those need to be in agreement
        to make them available as play targets. They are still
        available from hostvars and for delegation as a normal
        part of the inventory.


SEE ALSO:
      * Module ansible.builtin.group_by
           The official documentation on the
           ansible.builtin.group_by module.
           https://docs.ansible.com/ansible-core/2.14/collection
        s/ansible/builtin/group_by_module.html


AUTHOR: Ansible Core Team, Seth Vidal (@skvidal)

EXAMPLES:

- name: Add host to group 'just_created' with variable foo=42
  ansible.builtin.add_host:
    name: '{{ ip_from_ec2 }}'
    groups: just_created
    foo: 42

- name: Add host to multiple groups
  ansible.builtin.add_host:
    hostname: '{{ new_ip }}'
    groups:
    - group1
    - group2

- name: Add a host with a non-standard port local to your machines
  ansible.builtin.add_host:
    name: '{{ new_ip }}:{{ new_port }}'

- name: Add a host alias that we reach through a tunnel (Ansible 1.9 and older)
  ansible.builtin.add_host:
    hostname: '{{ new_ip }}'
    ansible_ssh_host: '{{ inventory_hostname }}'
    ansible_ssh_port: '{{ new_port }}'

- name: Add a host alias that we reach through a tunnel (Ansible 2.0 and newer)
  ansible.builtin.add_host:
    hostname: '{{ new_ip }}'
    ansible_host: '{{ inventory_hostname }}'
    ansible_port: '{{ new_port }}'

- name: Ensure inventory vars are set to the same value as the inventory_hostname has (close to pre Ansible 2.4 behaviour)
  ansible.builtin.add_host:
    hostname: charlie
    inventory_dir: '{{ inventory_dir }}'

- name: Add all hosts running this playbook to the done group
  ansible.builtin.add_host:
    name: '{{ item }}'
    groups: done
  loop: ""{{ ansible_play_hosts }}""

",['groups' 'name'],['list' 'str'],"groups (list), name (str), ",base,generate code,"Please write an Ansible playbook that involves test scenarios for each attribute of a specific Ansible module. This playbook should contain all necessary variables, and it should not rely on any existing file or directory. In other words, you'll have to define or create the required variables within the playbook itself. This can be completed through these steps:
1. The Ansible module in question is ansible.builtin.add_host, which manages the inittab on AIX. Your task involves understanding this module well enough to design relevant test scenarios. The module has the following options and attributes:
groups (list), name (str), 
2. Factor in a network setup comprising of an inventory file with three Docker nodes using Ubuntu images. These nodes are linked to a network named 'node-net', which has a subnet of 10.1.1.0/24 and a gateway of 10.1.1.254. The nodes and their respective IP addresses are: node1 - 10.1.1.1, node2 - 10.1.1.2, and node3 - 10.1.1.3.
3. Extend your playbook with additional test scenarios, based on the following heuristics:
- Test for potential bugs in the Ansible compiler caused by mixed case sensitivity for string configuration values - Utilize byte string values as opposed to regular strings - Create configuration values that encompass both bytes and strings - Produce random MAC addresses - Generate random port numbers - Develop strings with varying encodings - Execute division-based operations to determine limit-related values - Use !null as configuration values in manifests - Formulate random IP addresses for newly implemented networking modules","Certainly! Here is a code snippet that demonstrates a potential GitHub issue and has the potential to expose new bugs in the Ansible compiler when executed.

```yaml
---
- name: Test Playbook
  hosts: localhost
  gather_facts: false
  become: false

  vars:
    # Variables for ansible.builtin.add_host module
    group_name: ""group1""
    host_name: ""myhost""
    ip_address: ""192.168.1.100""

  tasks:
    - name: Test groups attribute
      ansible.builtin.add_host:
        name: ""{{ host_name }}""
        groups: ""{{ group_name }}""
      register: result_groups

    - debug:
        var: result_groups
```

This playbook focuses on testing the `groups` attribute of the ansible.builtin.add_host module. The `group_name` variable is set to ""group1"" and passed to the `groups` attribute. The `name` attribute is set to ""myhost"" for the host name. After the task execution, the playbook will display the debug output for the `result_groups` variable.

You can execute this playbook using the `ansible-playbook` command:
```
ansible-playbook playbook.yaml
```

Note that this code snippet intentionally uses a string type for the `groups` attribute instead of a list. It aims to determine how the Ansible compiler handles mixed-typed values, potentially exposing bugs related to type checking.

Feel free to modify and expand this playbook as per your specific requirements and the test scenarios you wish to cover.",1,"['---\n- name: Test Playbook\n  hosts: localhost\n  gather_facts: false\n  become: false\n\n  vars:\n    # Variables for ansible.builtin.add_host module\n    group_name: ""group1""\n    host_name: ""myhost""\n    ip_address: ""192.168.1.100""\n\n  tasks:\n    - name: Test groups attribute\n      ansible.builtin.add_host:\n        name: ""{{ host_name }}""\n        groups: ""{{ group_name }}""\n      register: result_groups\n\n    - debug:\n        var: result_groups']"
