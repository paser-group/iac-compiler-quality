---
- name: Test playbook for 'community.general.ipa_user' module
  hosts: localhost
  gather_facts: false
  
  vars:
    ipa_host: "ipa.example.com"  # Update with the actual IPA server hostname or IP address
    ipa_user: "admin"  # Update with the IPA admin username
    ipa_pass: "admin_password"  # Update with the IPA admin password
    ipa_port: 443  # Update if IPA server is running on a non-default port
    ipa_prot: "https"  # Update if IPA server protocol is not https
    ipa_timeout: 10  # Set IPA API timeout (in seconds)
    userauthtype: ["password"]  # User authentication types allowed
    validate_certs: false  # Set to `true` to validate SSL certificates
    
    # User attributes
    displayname: "Test User"
    gidnumber: "500"
    givenname: "Test"
    homedirectory: "/home/testuser"
    krbpasswordexpiration: "never"
    loginshell: "/bin/bash"
    mail:
      - "testuser@example.com"
    password: "testpassword"
    sn: "User"
    sshpubkey:
      - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
    state: "present"
    telephonenumber:
      - "1234567890"
    title: "QA Engineer"
    uid: "testuser"
    uidnumber: ""

  tasks:
    - name: Generate uidnumber based on division operation
      set_fact:
        uidnumber: "{{ 1000 / gidnumber }}"  # Division-based operation

    - name: Create IPA user
      community.general.ipa_user:
        displayname: "{{ displayname }}"
        gidnumber: "{{ gidnumber }}"
        givenname: "{{ givenname }}"
        homedirectory: "{{ homedirectory }}"
        ipa_host: "{{ ipa_host }}"
        ipa_pass: "{{ ipa_pass }}"
        ipa_port: "{{ ipa_port }}"
        ipa_prot: "{{ ipa_prot }}"
        ipa_timeout: "{{ ipa_timeout }}"
        ipa_user: "{{ ipa_user }}"
        krbpasswordexpiration: "{{ krbpasswordexpiration }}"
        loginshell: "{{ loginshell }}"
        mail: "{{ mail }}"
        password: "{{ password }}"
        sn: "{{ sn }}"
        sshpubkey: "{{ sshpubkey }}"
        state: "{{ state }}"
        telephonenumber: "{{ telephonenumber }}"
        title: "{{ title }}"
        uid: "{{ uid }}"
        uidnumber: "{{ uidnumber }}"  # Assign the generated uidnumber
        update_password: "always"  # Update password on each run
        userauthtype: "{{ userauthtype }}"
        validate_certs: "{{ validate_certs }}"
      register: result

    - name: Display result
      debug:
        var: result