---
- name: Test playbook for community.network.avi_pool module
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Create Avi Pool
      community.network.avi_pool:
        controller: "{{ controller }}"
        username: "{{ username }}"
        password: "{{ password }}"
        tenant: "{{ tenant }}"
        api_version: "{{ api_version }}"
        name: "{{ name }}"
        state: "{{ state }}"
        tenant_uuid: "{{ tenant_uuid }}"
        a_pool: null
        ab_pool: null
        ab_priority: null
        analytics_policy: null
        analytics_profile_ref: null
        api_context: {}
        apic_epg_name: null
        application_persistence_profile_ref: null
        autoscale_launch_config_ref: null
        autoscale_networks: null
        autoscale_policy_ref: null
        avi_api_patch_op: null
        avi_api_update_method: null
        avi_credentials: {}
        avi_disable_session_cache_as_fact: false
        capacity_estimation: false
        capacity_estimation_ttfb_thresh: null
        cloud_config_cksum: null
        cloud_ref: null
        conn_pool_properties: null
        connection_ramp_duration: null
        created_by: null
        default_server_port: null
        delete_server_on_dns_refresh: false
        description: null
        domain_name: null
        east_west: false
        enabled: true
        external_autoscale_groups: null
        fail_action: null
        fewest_tasks_feedback_delay: null
        graceful_disable_timeout: null
        gslb_sp_enabled: false
        health_monitor_refs: null
        host_check_enabled: false
        inline_health_monitor: false
        ipaddrgroup_ref: null
        lb_algorithm: null
        lb_algorithm_consistent_hash_hdr: null
        lb_algorithm_core_nonaffinity: null
        lb_algorithm_hash: null
        lookup_server_by_name: false
        max_concurrent_connections_per_server: null
        max_conn_rate_per_server: null
        min_health_monitors_up: null
        min_servers_up: null
        networks: null
        nsx_securitygroup: null
        pki_profile_ref: null
        placement_networks: null
        prst_hdr_name: null
        request_queue_depth: null
        request_queue_enabled: false
        rewrite_host_header_to_server_name: false
        rewrite_host_header_to_sni: false
        server_auto_scale: false
        server_count: null
        server_name: null
        server_reselect: null
        server_timeout: null
        servers: null
        service_metadata: null
        sni_enabled: false
        ssl_key_and_certificate_ref: null
        ssl_profile_ref: null
        tenant_ref: null
        url: null
        use_service_port: false
        uuid: null
        vrf_ref: null

        # Heuristic-based test cases: Generate strings with varied encodings
        strings_encodings:
          - string: "{{ lookup('pipe', 'echo -n Hello, world!') }}"
            encoding: "{{ lookup('pipe', 'echo -n utf-8') }}"
          - string: "{{ lookup('pipe', 'echo -n こんにちは、世界！') }}"
            encoding: "{{ lookup('pipe', 'echo -n utf-8') }}"
          - string: "{{ lookup('pipe', 'echo -n 你好，世界！') }}"
            encoding: "{{ lookup('pipe', 'echo -n utf-8') }}"
          - string: "{{ lookup('pipe', 'echo -n नमस्ते दुनिया!') }}"
            encoding: "{{ lookup('pipe', 'echo -n utf-8') }}"
          - string: "{{ lookup('pipe', 'echo -n Привет, мир!') }}"
            encoding: "{{ lookup('pipe', 'echo -n utf-8') }}"
          - string: "{{ lookup('pipe', 'echo -n مرحبا بالعالم!') }}"
            encoding: "{{ lookup('pipe', 'echo -n utf-8') }}"

          # Add more test cases with varied encodings if desired

      register: result

    - name: Display result
      debug:
        var: result