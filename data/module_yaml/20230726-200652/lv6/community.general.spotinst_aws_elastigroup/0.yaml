---
- name: Test Ansible latent type-related bugs
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Create Spotinst AWS Elastigroup
      community.general.spotinst_aws_elastigroup:
        account_id: "1234567890"
        availability_vs_cost: "balanced"
        availability_zones:
          - us-east-1a
          - us-east-1b
        block_device_mappings:
          - device_name: /dev/sda1
            ebs:
              volume_size: 50
        chef:
          run_list:
            - "recipe[base]"
        credentials_path: "/path/to/credentials"
        do_not_update:
          - ami
        down_scaling_policies:
          - policy_name: scale-down-policy
            threshold: 20
        draining_timeout: 300
        ebs_optimized: true
        ebs_volume_pool:
          - size: 50
            iops: 1000
        ecs:
          cluster_name: "my-cluster"
          service_name: "my-service"
        elastic_beanstalk:
          environment_name: "my-environment"
          application_name: "my-application"
        elastic_ips:
          - allocation_id: "eipalloc-1234567890"
        fallback_to_od: true
        health_check_grace_period: 300
        health_check_type: "EC2"
        health_check_unhealthy_duration_before_replacement: 600
        iam_role_arn: "arn:aws:iam::1234567890:role/my-role"
        iam_role_name: "my-role"
        id: "group-1234567890"
        image_id: "ami-1234567890"
        key_pair: "my-key-pair"
        kubernetes:
          cluster_name: "my-cluster"
          service_name: "my-service"
        lifetime_period: 3600
        load_balancers:
          - name: "my-load-balancer"
            target_group_arn: "arn:aws:elasticloadbalancing:us-east-1:1234567890:targetgroup/my-target-group"
        max_size: 10
        mesosphere:
          dcos_cluster_name: "my-cluster"
          marathon_app_name: "my-app"
        min_size: 1
        monitoring: "basic"
        multai_load_balancers:
          - name: "my-load-balancer"
            target_group_arn: "arn:aws:elasticloadbalancing:us-east-1:1234567890:targetgroup/my-target-group"
        multai_token: "my-token"
        name: "my-elastigroup"
        network_interfaces:
          - device_index: 0
            subnet_id: "subnet-1234567890"
        on_demand_count: 1
        on_demand_instance_type: "t2.micro"
        opsworks:
          stack_id: "1234567890"
        persistence:
          persistent_block_device:
            size: 50
            iops: 1000
          block_devices_mapping:
            - device: /dev/sda1
              size: 50
        product: "Linux/UNIX"
        rancher:
          stack_name: "my-stack"
          service_name: "my-service"
        right_scale:
          deployment_name: "my-deployment"
          server_template_name: "my-template"
        risk: 1
        roll_config:
          batch_size_percentage: 20
          grace_period_percentage: 5
        scheduled_tasks:
          - task_name: "my-task"
            cron_expression: "0 0 * * *"
        security_group_ids:
          - "sg-1234567890"
        shutdown_script: "echo 'Shutting down...'"
        signals:
          - name: "my-signal"
            timeout: 60
        spin_up_time: 300
        spot_instance_types:
          - "t2.micro"
          - "t3.micro"
        state: "present"
        tags:
          - key: "Name"
            value: "my-instance"
        target: 10
        target_group_arns:
          - "arn:aws:elasticloadbalancing:us-east-1:1234567890:targetgroup/my-target-group"
        target_tracking_policies:
          - policy_name: "my-policy"
            predefined_metric_specification:
              predefined_metric_type: "ASGAverageCPUUtilization"
        tenancy: "default"
        terminate_at_end_of_billing_hour: true
        token: "my-spotinst-token"
        uniqueness_by: "name"
        unit: "Spot"
        up_scaling_policies:
          - policy_name: scale-up-policy
            threshold: 80
        user_data: |
          #!/bin/bash
          echo "Initializing instance..."
        utilize_reserved_instances: true
        wait_for_instances: true
        wait_timeout: 600
      register: result

    - name: Print result
      debug:
        var: result