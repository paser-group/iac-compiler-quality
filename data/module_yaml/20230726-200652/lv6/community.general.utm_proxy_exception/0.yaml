- name: Test 'community.general.utm_proxy_exception' module
  hosts: localhost
  gather_facts: false
  become: false

  vars:
    example_headers:
      "Content-Type": "application/json"
    example_name: 1234
    example_op: "add"
    example_path: ["/test/path"]
    example_skip_custom_threats_filters: ["mt", "phishing"]
    example_skip_threats_filter_categories: [1, 2]
    example_skipav: "false"
    example_skipbadclients: "false"
    example_skipcookie: "false"
    example_skipform: "false"
    example_skipform_missingtoken: "false"
    example_skiphtmlrewrite: "false"
    example_skiptft: "false"
    example_skipurl: "false"
    example_source: ["192.168.1.1"]
    example_state: "present"
    example_status: "true"
    example_utm_host: "utm.example.com"
    example_utm_port: "8080"
    example_utm_protocol: "https"
    example_utm_token: "secret"
    example_validate_certs: "true"

  tasks:
    - name: Create reverse_proxy exception
      community.general.utm_proxy_exception:
        headers: "{{ example_headers }}"
        name: "{{ example_name }}"
        op: "{{ example_op }}"
        path: "{{ example_path }}"
        skip_custom_threats_filters: "{{ example_skip_custom_threats_filters }}"
        skip_threats_filter_categories: "{{ example_skip_threats_filter_categories }}"
        skipav: "{{ example_skipav }}"
        skipbadclients: "{{ example_skipbadclients }}"
        skipcookie: "{{ example_skipcookie }}"
        skipform: "{{ example_skipform }}"
        skipform_missingtoken: "{{ example_skipform_missingtoken }}"
        skiphtmlrewrite: "{{ example_skiphtmlrewrite }}"
        skiptft: "{{ example_skiptft }}"
        skipurl: "{{ example_skipurl }}"
        source: "{{ example_source }}"
        state: "{{ example_state }}"
        status: "{{ example_status }}"
        utm_host: "{{ example_utm_host }}"
        utm_port: "{{ example_utm_port }}"
        utm_protocol: "{{ example_utm_protocol }}"
        utm_token: "{{ example_utm_token }}"
        validate_certs: "{{ example_validate_certs }}"
      register: result

    - name: Show result
      debug:
        var: result