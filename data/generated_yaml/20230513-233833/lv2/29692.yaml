
---
- name: Test EC2 Module
  hosts: localhost
  gather_facts: no
  vars:
    region: "us-east-1"
    image_id: "ami-0c55b159cbfafe1f0"
    ec2_user: "ubuntu"
    key_path: "/path/to/key"
  tasks:
    - name: Launch EC2 Instances with Missing Image ID
      ec2:
        instance_type: "t2.micro"
        key_name: "keyname"
        group: "default"
        region: "{{ region }}"
        vpc_subnet_id: "subnet-12345"
      register: no_image_id_instance

    - name: Invalid Arg Name
      ec2:
        instance_type: "t2.micro"
        key_name: "keyname"
        group: "default"
        region: "{{ region }}"
        vpc_subnet_id: "subnet-12345"
        invited: "no"
      ignore_errors: true

    - name: Invalid Arg Value
      ec2:
        instance_type: "t2.micro"
        key_name: "keyname"
        group: "default"
        region: "{{ region }}"
        vpc_subnet_id: "subnet-12345"
        image_id: "{{ image_id }}"
        placement: "'us-east-1"
      ignore_errors: true

    - name: Invalid JSON Input
      ec2:
        instance_type: "t2.micro'
        key_name: "keyname"
        group: "default"
        region: "{{ region }}"
        vpc_subnet_id: "["subnet-12345"]"
        image_id: "{{ image_id }}"
      ignore_errors: true

    - name: Incorrect Indentation
      ec2:
        instance_type: "t2.micro"
          key_name: "keyname"
        group: "default"
        region: "{{ region }}"
        vpc_subnet_id: "subnet-12345"
        image_id: "{{ image_id }}"
      ignore_errors: true

    - name: Launch EC2 Instance
      ec2:
        instance_type: "t2.micro"
        key_name: "{{ ec2_user }}"
        group: "default"
        region: "{{ region }}"
        vpc_subnet_id: "subnet-12345"
        image_id: "{{ image_id }}"
      register: ec2_instance

    - name: Terminate EC2 Instance
      ec2:
        state: "absent"
        instance_id: "{{ ec2_instance.instance_id }}"
        region: "{{ region }}"
      ignore_errors: true

    - name: SSH to EC2 Instances
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        delay: 30
        timeout: 300
        state: started
      with_items: "{{ ec2_instance.instances }}"
      when: ec2_instance is defined
      become: yes
      become_user: "{{ ec2_user }}"
      gather_facts: no

    - name: Upload SSH Key
      copy:
        src: "{{ key_path }}"
        dest: "/home/ubuntu/{{ item.public_ip }}.pem"
        mode: '0400'
      with_items: "{{ ec2_instance.instances }}"
      when: ec2_instance is defined
