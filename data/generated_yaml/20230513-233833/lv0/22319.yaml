
#include <eosio/net_plugin/net_plugin.hpp>
#include <eosio/chain/exceptions.hpp>

#include <boost/asio/high_resolution_timer.hpp>

using namespace eosio::net_plugin;
using namespace eosio::chain;

// Set the maximum number of retries for connection attempts
const int MAX_RETRIES = 3;

// Returns true if the given exception indicates a temporary connection issue
bool is_temporary_error(std::exception_ptr e) {
    try {
        if (e) {
            std::rethrow_exception(e);
        }
    } catch (const boost::system::system_error& ex) {
        if (ex.code() == boost::asio::error::connection_aborted ||
            ex.code() == boost::asio::error::connection_reset ||
            ex.code() == boost::asio::error::eof ||
            ex.code() == boost::asio::error::timed_out) {
            return true;
        }
    } catch (...) {
    }
    return false;
}

// Open a connection to the given endpoint, with retries if necessary
void connect_to_endpoint(const std::string& endpoint) {
    std::shared_ptr<connection> conn = std::make_shared<connection>(endpoint);

    for (int i = 0; i < MAX_RETRIES; ++i) {
        try {
            conn->connect();
            return; // connection succeeded
        } catch (const std::exception& e) {
            if (is_temporary_error(std::current_exception())) {
                // sleep for some time before retrying
                std::this_thread::sleep_for(std::chrono::milliseconds(500 * (i + 1)));
            } else {
                // rethrow the exception
                throw;
            }
        }
    }

    // retries exceeded, throw an exception
    throw connection_exception("Unable to connect to endpoint: " + endpoint);
}
