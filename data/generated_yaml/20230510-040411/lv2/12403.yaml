
# playbook-generator.py
import random

def generate_playbook():
    playbook = "---
- name: Test get_file_parser() function
  hosts: localhost
  gather_facts: no

  tasks:\n"

    # Generate random test cases
    test_cases = [
        {"path": "/etc/hosts", "dest": "/tmp/hosts"},
        {"path": "/var/log/syslog", "dest": "/tmp/syslog"},
        {"path": "http://example.com/config.ini", "dest": "/tmp/config.ini"},
        {"path": "s3://bucket/object", "dest": "/tmp/object"},
        {"path": "/etc/passwd", "dest": "/dev/null"},
        {"src": "/tmp/test.txt", "dest": "/etc/test.txt"},
        {"src": "/var/log/nginx/access.log", "dest": "/tmp/access.log"},
        {"src": "http://example.com/img.jpg", "dest": "/opt/img.jpg"},
        {"src": "s3://bucket/object", "dest": "/tmp/object"},
        {"src": "/etc/passwd", "dest": "/dev/null"}
    ]

    for i in range(10):
        # Pick a random test case
        test_case = random.choice(test_cases)

        # Generate task with unconventional syntax and unexpected inputs
        task = f"""
    - name: Test case {i+1}
      get_file:
        {"path" if random.choice([True, False]) else "src"}: {test_case.get("path", test_case.get("src"))}
        dest: {test_case.get("dest")}
        {"".join(f"{k}: {v}\n" for k, v in test_case.items() if k not in ["path", "src", "dest"])}
"""
        playbook += task

    return playbook

if __name__ == "__main__":
    print(generate_playbook())
