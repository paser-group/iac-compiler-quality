
- name: Ansible Undefined Variable Playbook
  hosts: localhost
  
  vars:
    my_var: "my value"
  
  tasks:
    - name: Task 1
      debug:
        msg: "{{ var1 }} {{ var2 }}"
      vars:
        # Using undefined variables
        var1: "{{ my_var }}"
        var2: "{{ undefined_var }}"
    
    - name: Task 2
      debug:
        msg: "{{ var1|default('default value') }} {{ var2|default('default value') }}"
      vars:
        # Using undefined variables with default values
        var1: "{{ my_var }}"
        var2: "{{ undefined_var }}"
      
    - name: Task 3
      debug:
        msg: "{{ var1[0] }}"
      vars:
        # Accessing non-existent index of a list
        var1: []
    
    - name: Task 4
      debug:
        msg: "{{ var1.split(',') }}"
      vars:
        # Using string methods on an undefined variable
        var1: "{{ undefined_var }}"
    
    - name: Task 5
      debug:
        msg: "{{ var1 | lower }}"
      vars:
        # Applying filters to an undefined variable
        var1: "{{ undefined_var }}"
      
    - name: Task 6
      debug:
        # Using undefined variable in a loop
        msg: "{{ item }} {{ undefined_var }}"
      loop: 
        - 1
        - 2
        - 3
        
    - name: Task 7
      debug:
        msg: "{{ var1 }}"
      vars:
        # Using reserved keywords as variable names
        with_items: "{{ my_var }}"
    
    - name: Task 8
      debug:
        # Using unconventional syntax for variable interpolation
        msg: "{my_var}"
      vars:
        my_var: "my new value"
      
    - name: Task 9
      include_vars: "{{ undefined_file }}"
      
    - name: Task 10
      command: "/bin/bash command.sh"
      # Using arbitrary shell commands
      
    - name: Task 11
      fail:
        msg: "This task fails on purpose"
      # Testing the error handling capability of Ansible
      
    - name: Task 12
      assert:
        that: "1 == 2"
      # Testing the assert module
